openapi: 3.0.0

servers:
  - url: '{protocol}://{host}:{port}/{environment}'
    description: "Web address for the RADview Northbound Interface (NBI). For example: https://127.0.0.1:3002/mng164/"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
        description: RADview server IP Address or host name.
      port:
        default: '3002'
        description: RADview server port number.
      environment:
        enum: 
          - mng164/hub  # RADview Production Server 
        default: mng164/hub
        
info:
  version: "1.0.0"
  title: RADview Areas
  description: |
    This is Areas NBI. 
  contact:
    name: RAD Data Communications Ltd.
    url: 'http://www.rad.com/71-2379/support/'
    email: support@rad.com
    
#############################################################################
# The security object specifies the security or authorization protocol 
# used when submitting requests.
############################################################################# 
security:
  - ApiKeyAuth: []
  
tags:
  - name: Area
    description: Everything about your Areas. All CRUD actions for Users are supported here.

paths:
  /area:
    #------------------------------------ #
    #          Create an Area             #
    #------------------------------------ #
    post:
      tags:
        - Area
      summary: Create a new area
      operationId: createArea
      description: creating new area
      parameters:
        - $ref: "#/components/parameters/auth"
      requestBody:
        $ref: '#/components/requestBodies/Area'
      responses:
        200:
          $ref: '#/components/responses/AreaResponse'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
    #----------------------------------------------- #
    #         Get all Areas by filter (query)        #
    #----------------------------------------------- #
    get:
      summary: Get all areas
      operationId: getAreas
      description: Get all areas.
      tags:
        - Area
      parameters:
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/query"
      responses:
        200:
          description: All Areas returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Area'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

  '/area/{id}':
    parameters:
      - $ref: "#/components/parameters/auth"
      - $ref: "#/components/parameters/id"
    
    #----------------------------------------- #
    #       Get a specific Area (by ID)   #
    #----------------------------------------- #
    get:
      summary: Get area by id
      operationId: getAreaById
      description: Get specific area.
      tags:
        - Area
      responses:
        200:
          description: Area returned successfully.
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/Area'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
    
    #--------------------------------------------- #
    #       Update a specific Area (by ID)         #
    #--------------------------------------------- #
    patch:
      tags:
        - Area
      summary: Update an existing area
      operationId: updateArea
      description: Update specific area
      requestBody:
        $ref: '#/components/requestBodies/Area'
      responses:
        200:
          $ref: '#/components/responses/AreaResponse'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
    #------------------------------------------ #
    #    Delete a specific Area (by ID)         #
    #------------------------------------------ #
    delete:
      summary: Delete area by id
      operationId: deleteAreaById
      description: Delete specific area.
      tags:
        - Area
      responses:
        200:
          description: Area deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    readOnly: true
                    example: 1
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
components:
  schemas:
  #Start Areas objects
     Area:
      properties:
        id:
          type: string
          default: ""
        name:
          type: string
          description: "A unique name to the Area"
          example: "East-Area"
          default: ""
        parentId:
          # Can be null only for area-NOC. Otherwise must be non-null
          nullable: true
          type: string
          default: ""
        circleId:
          nullable: false
          description: "Circle Id containing the Area" 
          type: string
          example: NorthState
          
        severity:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Enums/1.0.0#/definitions/SeverityEnumWithNormalDefault"
          
        createdAt:
          type: string
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) '.' time-hundredths-of-sec (2 digits) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time when user was created (e.g. 2017-07-21T17:32:28.67Z) according to RFC 3339, section 5.6"
          format: date-time
          example: "2017-07-21T17:32:28.67Z"
          readOnly: true
        modifiedAt:
          type: string
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) '.' time-hundredths-of-sec (2 digits) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time when user was modified (e.g. 2017-07-21T17:32:28.67Z) according to RFC 3339, section 5.6"
          format: date-time
          example: "2017-07-21T17:32:28.67Z"
          readOnly: true
         # For DB only 
#        domainIds:
#          nullable: true
#          type: array
#          items:
#            type: String
          
        
  #---------------------------------------------#
  # Parameters                                  #
  #---------------------------------------------#
  parameters:
    auth:
      name: auth
      in: header
      required: true
      description: authentication 
      allowEmptyValue: false
      schema:
        type: string
      example: entlf31e7qlsmrhhq14s6h0h43
    id:
      name: id
      in: path
      required: true
      description: Numeric ID of the Area.
      schema:
        type: string
      example: 1
    query:
      name: query
      in: query
      required: false
      description: Enable query on get response 
      schema:
        type: string
      example: ?name=subD_1&parentId=1
  
  #---------------------------------------------#
  # Rresponses                                  #
  #---------------------------------------------#
  responses:
    AreaResponse:
      description: Operation on Area ended Successfully. 
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                readOnly: true
                example: false
              successful:
                type: boolean
                readOnly: true
                example: true
              data:
                type: string
                readOnly: true
                example: "{data as json}"

  #------------------------------------ #
  #       Request Bodies                #
  #------------------------------------ #
  requestBodies:

    Area:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Area'
      description: Area Object to create/update
      required: true

  #------------------------------------ #
  #       Security Schema (copied)      #
  #------------------------------------ #
  securitySchemes:
    ApiKeyAuth:
      type: apiKey 
      
      description: >-
        **Authentication key**. *Example: augtt$93eee2ddsad34jjk*. Every request
        that your application sends to the RADview API, it needs to identify your application.   
        
      #The name of the header value submitted in the request. Used only for apiKey type security
      name: auth 
      
      # Options are query, header or cookie. Used only for apiKey type security.
      in: header