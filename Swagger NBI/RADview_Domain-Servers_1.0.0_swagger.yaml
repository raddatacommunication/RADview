openapi: 3.0.0

servers:
  - url: '{protocol}://{host}:{port}/{environment}'
    description: "Web address for the RADview Northbound Interface (NBI). For example: https://127.0.0.1:3002/mng164/"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
        description: RADview server IP Address or host name.
      port:
        default: '3002'
        description: RADview server port number.
      environment:
        enum: 
          - mng164/auth  # RADview Production Server 
        default: mng164/servers

info:
  version: '1.0.0'
  title: 'RADview Domain Servers'
  description: 'Domain Servers '
  contact:
    name: RAD Data Communications Ltd.
    url: 'http://www.rad.com/71-2379/support/'
    email: support@rad.com
    
########################################################################################################
# The security object specifies the security or authorization protocol to use when submitting requests.
########################################################################################################
security:
  - ApiKeyAuth: []

tags:
  - name: Domain Servers
    description: API for managing domain servers.
        
paths:
  /domain-servers:
    parameters:
    - $ref: "#/components/parameters/auth"
    post:
      summary: Create new Domain server
      operationId: createDomain
      description: creating new Domain server
      tags:
        - Domain Servers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainServer'
      responses:
        200:
          $ref: '#/components/responses/DomainResponse'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

    get:
      summary: Get all Domain-Servers
      operationId: getDomainServers
      description: Get all Domain-Servers.
      tags:
        - Domain Servers
      parameters:
        - $ref: "#/components/parameters/query"
      responses:
        200:
          description: All Domain-Servers returned successfully.
          content:
            application/json:    
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainServer'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

  /domain-servers/{id}:
    parameters:
      - $ref: "#/components/parameters/auth"
      - $ref: "#/components/parameters/id"

    get:
      summary: Get domain Server by id
      operationId: getDomainById
      description: Get specific domain.
      tags:
        - Domain Servers
      responses:
        200:
          description: Domain returned successfully.
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/DomainServer'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

    patch:
      summary: Update Domain Server
      operationId: updateDomain
      description: Update specific domain.
      tags:
        - Domain Servers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainServer'
      responses:
        200:
          $ref: '#/components/responses/DomainResponse'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

    delete:
      summary: Delete Domain Server by id
      operationId: deleteDomainServerById
      description: Delete specific Domain Server.
      tags:
        - Domain Servers
      responses:
        200:
          description: Domain Server deleted successfully.
          content:
            application/json:    
              schema:
                type: object
                properties:
                  id:
                    type: string
                    readOnly: true
                    example: 1
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

components:
  schemas:
    DomainServer:
      description: Model containing domain info.
      type: object
      properties:
        id:
          description: Id of this domain
          type: string
          readOnly: true
          example: 1
        name:
          description: Name of this domain
          type: string
          example: DomainA 
        description:
          description: Description of this domain
          type: string
          example: RADview Server domain (TLV)
        primaryNetData:
          $ref: '#/components/schemas/NetData'
        secondaryNetData:
           $ref: '#/components/schemas/NetData'
        parentCircleId:
          description:  Domain Server parent Group Id
          type: string
          example: 1
        operStatus:
          description: Operational status of this domain
          type: integer
          format: int32
          enum:
            - value: 1
              name: UP
              description: Domain is UP
            - value: 2
              name: DOWN
              description: Domain is DOWN
            - value: 255
              name: UNKNOWN
    NetData:
      description: Model containing domain Network info.
      type: object
      properties:
          hostName:
            description:  Domain Server host name
            type: string
            example: DNA-D-HPG2-W10
          ipAddress:
            description:  Domain Server IP Address
            type: string
            example: 10.10.10.10
          port:
            description:  Domain Server http/s port
            type: string
            example: 3002

  parameters:
    auth:
      name: auth
      in: header
      required: true
      description: authentication 
      allowEmptyValue: false
      schema:
        type: string
      example: entlf31e7qlsmrhhq14s6h0h43
    id:
      name: id
      in: path
      required: true
      description: Numeric ID of the Domain.
      schema:
        type: string
      example: 1
    query:
      name: query
      in: query
      required: false
      description: Enable query on get response 
      schema:
        type: string
      example: ?name=domain1&operStatus=1
  
  responses:
    DomainResponse:
      description: Successfully create/update Domain Server. 
      content:
        application/json:    
          schema:
            type: object
            properties:
              error:
                type: boolean
                readOnly: true
                example: false
              successful:
                type: boolean
                readOnly: true
                example: true
              data:
                type: string
                readOnly: true
                example: "{data as json}"
                
  securitySchemes:
    ApiKeyAuth:
      type: apiKey 
      
      description: >-
        **Authentication key**. *Example: augtt$93eee2ddsad34jjk*. Every request
        that your application sends to the RADview API, it needs to identify your application.   
        
      #The name of the header value submitted in the request. Used only for apiKey type security
      name: auth 
      
      # Options are query, header or cookie. Used only for apiKey type security.
      in: header