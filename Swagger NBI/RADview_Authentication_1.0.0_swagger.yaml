openapi: 3.0.0

servers:
  - url: '{protocol}://{host}:{port}/{environment}'
    description: "Web address for the RADview Northbound Interface (NBI). For example: https://127.0.0.1:3002/mng164/"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
        description: RADview server IP Address or host name.
      port:
        default: '3300'
        description: RADview server port number.
      environment:
        enum: 
          - mng164/auth  # RADview Production Server 
        default: mng164/auth

info:
  version: "1.0.0"
  title: RADview Authentication
  description: |
    The API for RADview Authentication

    <b>Get Auth Token</b><BR>
    All requests to the RADview API must be authorized by an authenticated user. User is authenticated after it obtains a valid access token. An access token contains the security credentials for a login session and identifies the user and its privileges.
    
    Token allow users to enter their username and password in order to obtain a token which allows them to fetch a specific resource - without using their username and password. Instead of having to authenticate with username and password for each protected resource, the user authenticates that way once (within a session of limited duration), obtains a time-limited token in return, and uses that token for further authentication during the session. 
    
    <b>RFC 7519</b><BR>
    RADview token is based on JSON Web Token (JWT) which is an open standard (RFC 7519). For more infomation see <a href="https://jwt.io/introduction/">Introduction to JSON Web Tokens</a>.
  contact:
    name: RAD Data Communications Ltd.
    url: 'http://www.rad.com/71-2379/support/'
    email: support@rad.com

########################################################################################################
# The security object specifies the security or authorization protocol to use when submitting requests.
########################################################################################################
security:
  - ApiKeyAuth: []

tags:
  - name: Tokens
    description: This API generates an access token in exchange for user credentials that can be used by clients when working with the RADview API.

paths:
  /tokens:
    post:
      tags:
        - Tokens
      summary: Create a new Tokens, which is actually login
      operationId: createToken
      requestBody:
        $ref: '#/components/requestBodies/TokensReq'
      responses:
        200:
          description: A valid token was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        400:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse"
        401:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse"
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

  /validate:
    post:
      tags:
        - Authentication Validation
      summary: Validates that the given token is a valid one
      description: Validates that the given token is a valid one
      operationId: validateTokensToken
      requestBody:
          content:
            application/json:
              schema:
                type: string
                format: byte # base64-encoded file contents
                example: eyJhbGciOiJIUzI1NiIsInR5cGUiOiJKV1QifQ==.eyJyb2xlaWQiOiIxIiwiZXhwIjoiMTUzNjMyNjM4NiIsImlhdCI6IjE1MzYyMzk5ODYiLCJ0ZW5hbnQiOiIwIiwidXNlcm5hbWUiOiJhZG1pbiJ9.edHE8Fko4cS5EP0KgWf63GQo7J8xjnxh5tyLqJoEW8I
      responses:
        200:
          description: successful operation
        400:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse"
        401:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse"
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
#------------------------------------------------------------------------------------
components:
  requestBodies:
    TokensReq:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenRequest'
      description: User Object
      required: true

  schemas:

    TokenRequest:
      properties:
        username: 
          type: string
          default: ""
          example: "admin"
          description: "User name for first login, when token not used"
        password:
          type: string
          default: ""
          example: "1234"
          description: "Password for first login, when token not used"

    TokenResponse:
      properties:
        client_id:
          type: integer
          format: int32
          default: 0
        client_name:
          type: string
          example: "JEP"
        username: 
          type: string
          default: ""
          description: "User name for first login, when token not used"
          example: "admin"
        customer_updated_at:
          type: string
          format: date-time
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time for token customer updating (e.g. 2018-06-14T18:34:29Z) according to RFC 3339, section 5.6"
          example: "2018-04-22T12:38:00+05:30"
        customer_created_at:
          type: string
          format: date-time
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time for token customer creation (e.g. 2018-06-14T18:34:29Z) according to RFC 3339, section 5.6"
          example: "2018-04-22T12:38:00+05:30"
        token_created_datetime:
          type: string
          format: date-time
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time for token creation (e.g. 2018-06-14T18:34:29Z) according to RFC 3339, section 5.6"
          example: "2018-04-22T12:38:00+05:30"
        token_expired_datetime:
          type: string
          format: date-time
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time for token expiration (e.g. 2018-06-14T18:34:29Z) according to RFC 3339, section 5.6"
          example: "2018-04-22T12:38:00+05:30"
        token:
          type: string
          format: byte
          description: "The returned token"
          example: eyJhbGciOiJIUzI1NiIsInR5cGUiOiJKV1QifQ==.eyJyb2xlaWQiOiIxIiwiZXhwIjoiMTUzNjMyNjM4NiIsImlhdCI6IjE1MzYyMzk5ODYiLCJ0ZW5hbnQiOiIwIiwidXNlcm5hbWUiOiJhZG1pbiJ9.edHE8Fko4cS5EP0KgWf63GQo7J8xjnxh5tyLqJoEW8I?          

  securitySchemes:
    ApiKeyAuth:
      type: apiKey 
      
      description: >-
        **Authentication key**. *Example: augtt$93eee2ddsad34jjk*. Every request
        that your application sends to the RADview API, it needs to identify your application.   
        
      #The name of the header value submitted in the request. Used only for apiKey type security
      name: auth 
      
      # Options are query, header or cookie. Used only for apiKey type security.
      in: header