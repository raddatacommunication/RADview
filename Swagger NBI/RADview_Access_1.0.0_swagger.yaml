openapi: 3.0.0

servers:
  - url: '{protocol}://{host}:{port}/{environment}'
    description: "Web address for the RADview Northbound Interface (NBI). For example: https://127.0.0.1:3300/mng164/"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
        description: RADview server IP Address or host name.
      port:
        default: '3300'
        description: RADview server port number.
      environment:
        enum: 
          - mng164/access  # RADview Production Server 
        default: mng164/access
        
info:
  version: "1.0.0"
  title: RADview Access Control

  description: |
    This is Users NBI. 
    Users and Roles are used for access control. 
    
    <BR><b>Roles</b><BR>
    The Role is used to control the access to features. 
    <BR>  The default Roles are: 
    <BR>  * Monitor
    <BR>  * Administrator. 
    
    <BR>For each Operation the access level can be:
    <BR>  * No access 
    <BR>  * Read only 
    <BR>  * Full access 
   
    <BR><b>Users</b><BR>
    User is the person who is logging into and using the RADview application. Every user has one Role assigned to him which defines his permissions and rights. User may be, for example, the system administrator of the enterprise, operator, technician or monitor.
  contact:
    name: RAD Data Communications Ltd.
    url: 'http://www.rad.com/71-2379/support/'
    email: support@rad.com
    
#############################################################################
# The security object specifies the security or authorization protocol 
# used when submitting requests.
############################################################################# 
security:
  - ApiKeyAuth: []
  
tags:
  - name: Users
    description: Everything about your Users. All CRUD actions for Users are supported here.

  - name: Roles
    description: Everything about your Roles. All CRUD actions for Roles are supported here.
    
paths:
  /users:
    #------------------------------------ #
    #          Create a User              #
    #------------------------------------ #
    post:
      tags:
        - Users
      summary: Create a new user to be added to the users colletion
      operationId: createUser
      description: creating a new User
      parameters:
        - $ref: "#/components/parameters/auth"
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
    #----------------------------------------- #
    #         Get all users by filter (query)  #
    #----------------------------------------- #
    get:
      summary: Get all users
      operationId: getUsers
      description: Get all users or get all users by filter.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/query"
      responses:
        200:
          description: All relevant users returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

  '/users/{id}':
    parameters:
      - $ref: "#/components/parameters/auth"
      - $ref: "#/components/parameters/id"
      
    #------------------------------------ #
    #       Get a specific User (by ID)   #
    #------------------------------------ #
    get:
      summary: Get user by id
      operationId: getUserById
      description: Get a specific user (identified by its ID).
      tags:
        - Users
      responses:
        200:
          description: User returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

    #--------------------------------------- #
    #       Update a specific User (by ID)   #
    #--------------------------------------- #
    patch:
      tags:
        - Users
      summary: Update an existing user
      operationId: updateUser
      description: Update a specific user (identified by its ID).
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
    #------------------------------------ #
    #    Delete a specific User (by ID)   #
    #------------------------------------ #
    delete:
      summary: Delete user by id
      operationId: deleteUserById
      description: Delete a specific user (identified by its ID).
      tags:
        - Users
      responses:
        200:
          description: User deleted successfully.
          content:
            application/json:    
              schema:
                type: object
                properties:
                  id:
                    type: string
                    readOnly: true
                    example: 1
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
 
#-----------------------------------------------------------------------------------#
#                                 Roles                                             #
#-----------------------------------------------------------------------------------#
  /roles:
    #------------------------------------ #
    #          Create a Role              #
    #------------------------------------ #
    post:
      tags:
        - Roles
      summary: Create a new role to be added to the roles colletion, to be used by users.
      operationId: createRole
      description: creating new Role
      parameters:
        - $ref: "#/components/parameters/auth"
      requestBody:
        $ref: '#/components/requestBodies/Role'
      responses:
        200:
          $ref: '#/components/responses/RoleResponse'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
    #----------------------------------------- #
    #         Get all roles by filter (query)  #
    #----------------------------------------- #
    get:
      summary: Get all roles
      operationId: getroles
      description: Get all roles by filter (query).
      tags:
        - Roles
      parameters:
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/query"
      responses:
        200:
          description: All roles returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

  '/roles/{id}':
    parameters:
      - $ref: "#/components/parameters/auth"
      - $ref: "#/components/parameters/id"
      
    #------------------------------------ #
    #       Get a specific Role (by ID)   #
    #------------------------------------ #
    get:
      summary: Get role by id
      operationId: getRoleById
      description: Get a specific role (identified by its ID).
      tags:
        - Roles
      responses:
        200:
          description: Role returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

    #--------------------------------------- #
    #       Update a specific Role (by ID)   #
    #--------------------------------------- #
    patch:
      tags:
        - Roles
      summary: Update an existing role
      operationId: updateRole
      description: Update a specific role (identified by its ID).
      requestBody:
        $ref: '#/components/requestBodies/Role'
      responses:
        200:
          $ref: '#/components/responses/RoleResponse'
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"
          
    #------------------------------------ #
    #    Delete a specific Role (by ID)   #
    #------------------------------------ #
    delete:
      summary: Delete role by id
      operationId: deleteRoleById
      description: Delete a specific role (identified by its ID).
      tags:
        - Roles
      responses:
        200:
          description: Role deleted successfully.
          content:
            application/json:    
              schema:
                type: object
                properties:
                  id:
                    type: string
                    readOnly: true
                    example: 1
        400:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/BadRequestErrorResponse'
        401:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/UnauthorizedErrorResponse'
        403:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ForbiddenErrorResponse'
        404:
          $ref: 'https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/NotFoundErrorResponse'
        500:
          $ref: "https://api.swaggerhub.com/domains/RADview/Common-Responses/1.0.0#/responses/ServerResourceErrorResponse"

#--------------------------------------------------------------------------------------------------------
components:
  schemas:
    PermissionsEnum:
      type: string
      enum:
        # Allow All
        - all
    
        # View Network Elements
        - ne_read
        # Add/Edit Network Elements
        - ne_write
      
        # View Cards
        - card_read
        # Add/Edit Cards
        - card_write
      
        # View Card Type
        - cardtype_read
        # Add/Edit Card Type
        - cardtype_write
      
        # View NE Type
        - netype_read
        # Add/Edit NE Type
        - netype_write
      
        # View Role
        - role_read
        # Add/Edit Role
        - role_write
      
        # View Users
        - user_read
        # Add/Edit Users
        - user_write
      
        # View Port
        - port_read
        # Add/Edit Port
        - port_write
      
        # View Shelf View
        - shelfview_read
        # Add/Edit Shelf View
        - shelfview_write
      
        # View User Events
        - userevent_read
        # Delete User Events
        - userevent_write
      
        # View Provisioning Cleanup
        - dormantEntry_read
        # Delete/Edit Provisioning Cleanup
        - dormantEntry_write
      
        # View Active Tasks
        - task_read
        # Add/Edit Active Tasks
        - task_write
      
        # View Zero Touch Rules
        - ztrule_read
        # Add/Edit Zero Touch Rules
        - ztrule_write
      
        # View areas
        - subnet_read
        # Add/Edit areas
        - subnet_write
      
        # View taskreport
        - taskreport_read
        # Add/Edit taskreport
        - taskreport_write
      
        # Download log zip file
        - logfile_read
        # Add/Edit log zip file - optional use
        - logfile_write
      
        # View configuration template
        - configurationtemplate_read
        # Add/Edit configuration template
        - configurationtemplate_write
      
        # View cli script
        - cliscript_read
        # Add/Edit ccli script
        - cliscript_write
      
        # View settings
        - settings_read
        # Add/Edit settings
        - settings_write
      
        # View Download Configuration
        - t1_read
        # Add/Edit Download Configuration
        - t1_write
      
        # View Download Software
        - t2_read
        # Add/Edit Download Software
        - t2_write
      
        # View Download Auxiliary File
        - t52_read
        # Add/Edit Download Auxiliary File
        - t52_write
      
        # View Download Log
        - t33_read
        # Add/Edit Download Log
        - t33_write
      
        # View Execute CLI Script
        - t20_read
        # Add/Edit Execute CLI Script
        - t20_write
      
        # View install software
        - t30_read
        # Add/Edit install software
        - t30_write
        
        # View reboot
        - t22_read
        # Add/Edit reboot
        - t22_write
      
        # View save configuration
        - t34_read
        # Add/Edit save configuration
        - t34_write
      
        # View Upload Configuration
        - t11_read
        # Add/Edit Upload Configuration
        - t11_write
      
        # View Upload Software
        - t12_read
        # Add/Edit Upload Software
        - t12_write
      
        # View upload auxiliary file
        - t56_read
        # Add/Edit upload auxiliary file
        - t56_write
      
        # View upload license
        - t54_read
        # Add/Edit upload license
        - t54_write
      
        # View nms backup
        - t1001_read
        # Add/Edit nms backup
        - t1001_write
      
        # View Collect Statistics
        - t5_read
        # Add/Edit Collect Statistics
        - t5_write
      
        # View Generate Statistics Report
        - t50_read
        # Add/Edit Generate Statistics Report
        - t50_write
      
        # View Scan for Network Elements
        - t1000_read
        # Add/Edit Scan for Network Elements
        - t1000_write
      
        # View Scan for Services
        - t1004_read
        # Add/Edit Scan for Services
        - t1004_write
      
        # View compute node backup
        - t60_read
        # Add/Edit compute node backup
        - t60_write
      
        # View Compute Node Restore
        - t61_read
        # Add/Edit Compute Node Restore
        - t61_write
      
        # View vCPEOS-Module Reboot
        - t1005_read
        # Add/Edit vCPEOS-Module Reboot
        - t1005_write
      
        # View task history
        - taskhistory_read
        # Add/Edit task history
        - taskhistory_write
      
        # View packet capture
        - t70_read
        # Add/Edit packet capture
        - t70_write
      
      
    Role:
      properties:
        id:
          type: integer
          format: int32
          default: 0
          description: "ID of Role"
        description:
          type: string
          nullable: true
          description: "Description of Role."
        disableForEdit:
          type: boolean
          default: false
        name:
          type: string
          description: "Role name"
          example: "testRole"
        createdAt:
          type: string
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) "." milliseconds (3-digis) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time when role was created (e.g. 2017-07-21T17:32:28.561Z) according to RFC 3339, section 5.6"
          format: date-time
          example: "2017-07-21T17:32:28.45Z"
          readOnly: true
        modifiedAt:
          type: string
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) "." milliseconds (3-digis) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time when role was modified (e.g. 2017-07-21T17:32:28.561Z) according to RFC 3339, section 5.6"
          format: date-time
          example: "2017-07-21T17:32:28.45Z"
          readOnly: true
        permissions:
          description: "List of permissions for this role"
          type: array
          items:
            $ref: "#/components/schemas/PermissionsEnum"
    UserImageFile:
      properties:
        id:
          type: string
          example: "/avatar/users/user3.jpg"
          description: "ID of the file"
    User:
      properties:
        id:
          type: string
          readOnly: true
          description: "The unique ID that identifies the user"
        active:
          type: boolean
          default: true
        createdAt:
          type: string
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) "." milliseconds (3-digis) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time when user was created (e.g. 2017-07-21T17:32:28.561Z) according to RFC 3339, section 5.6"
          format: date-time
          example: "2017-07-21T17:32:28.45Z"
          readOnly: true
        modifiedAt:
          type: string
          # format date-time according to RFC 3339, section 5.6,
          # date-time = full-date "T" full-time
          # full-date = date-fullyear (4 digits) "-" date-month (2 digits: 01-12) "-" date-mday (2 digits: 01-31)
          # full-time = time-hour (2 digits: 00-23)":" time-minute (2 digits: 00-59) ":" time-second (2 digits: 00-59) "." milliseconds (3-digis) time-offset ("Z" / time-numoffset)
          # time-numoffset = ("+" / "-") time-hour ":" time-minute
          description: Date and time when user was modified (e.g. 2017-07-21T17:32:28.561Z) according to RFC 3339, section 5.6"
          format: date-time
          example: "2017-07-21T17:32:28.45Z"
          readOnly: true
        expirationDate:
          description: Date and time for token exipration for this user (e.g. 2018-06-14T18:34:239Z) according to RFC 3339, section 5.6"
          type: string
          format: date-time
          example: "2018-06-14T18:34:29.45Z"
          nullable: true
        files:
          # List of image files of the user
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/UserImageFile"
        login:
          type: string
          description: "User login name"
          example: "Customer-B"
        name:
          type: string
          description: "User displayed name"
          example: "Customer-B-for-display"
        password:
          # Used in POST/PUT/PATCH, not returned by GET
          type: string
          writeOnly: true
          description: "User password"
          example: "dyq79pl"
        roleId:
          description: "User role ID. Role ID (actually UUID) can be taken from roles table. E.g. Id of Administrator"
          type: string
          example: "32"
        mail:
          description: "User mail address"
          type: string
          example: "john@gmail.com"

  #---------------------------------------------#
  # Parameters                                  #
  #---------------------------------------------#
  parameters:
    auth:
      name: auth
      in: header
      required: true
      description: authentication 
      allowEmptyValue: false
      schema:
        type: string
      example: entlf31e7qlsmrhhq14s6h0h43
    id:
      name: id
      in: path
      required: true
      description: Numeric ID of the User/Role.
      schema:
        type: string
      example: 1
    query:
      name: query
      in: query
      required: false
      description: Enable query on get response 
      schema:
        type: string
      example: ?name=user1&roleId=1
  
  #---------------------------------------------#
  # Rresponses copied from Domain               #
  #---------------------------------------------#
  responses:
    UserResponse:
      description: Successfully create/update User. 
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                readOnly: true
                example: false
              successful:
                type: boolean
                readOnly: true
                example: true
              data:
                type: string
                readOnly: true
                example: "{data as json}"
    RoleResponse:
      description: Successfully create/update Role. 
      content:
        application/json:    
          schema:
            type: object
            properties:
              error:
                type: boolean
                readOnly: true
                example: false
              successful:
                type: boolean
                readOnly: true
                example: true
              data:
                type: string
                readOnly: true
                example: "{data as json}"
                
    #------------------------------------ #
    #       Request Bodies                #
    #------------------------------------ #
  requestBodies:

    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: User Object to create/update
      required: true

    Role:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Role'
        application/xml:
          schema:
            $ref: '#/components/schemas/Role'
      description: User Object
      required: true

  #------------------------------------ #
  #       Security Schema               #
  #------------------------------------ #
  securitySchemes:
    ApiKeyAuth:
      type: apiKey 
      
      description: >-
        **Authentication key**. *Example: augtt$93eee2ddsad34jjk*. Every request
        that your application sends to the RADview API, it needs to identify your application.   
        
      #The name of the header value submitted in the request. Used only for apiKey type security
      name: auth 
      
      # Options are query, header or cookie. Used only for apiKey type security.
      in: header